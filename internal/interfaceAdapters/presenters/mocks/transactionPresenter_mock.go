// Code generated by MockGen. DO NOT EDIT.
// Source: ./transactionPresenter.go

// Package mock_presenters is a generated GoMock package.
package mock_presenters

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockTransactionPresenter is a mock of TransactionPresenter interface.
type MockTransactionPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionPresenterMockRecorder
}

// MockTransactionPresenterMockRecorder is the mock recorder for MockTransactionPresenter.
type MockTransactionPresenterMockRecorder struct {
	mock *MockTransactionPresenter
}

// NewMockTransactionPresenter creates a new mock instance.
func NewMockTransactionPresenter(ctrl *gomock.Controller) *MockTransactionPresenter {
	mock := &MockTransactionPresenter{ctrl: ctrl}
	mock.recorder = &MockTransactionPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionPresenter) EXPECT() *MockTransactionPresenterMockRecorder {
	return m.recorder
}

// PresentTransaction mocks base method.
func (m *MockTransactionPresenter) PresentTransaction(ctx *gin.Context, statusCode int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PresentTransaction", ctx, statusCode)
}

// PresentTransaction indicates an expected call of PresentTransaction.
func (mr *MockTransactionPresenterMockRecorder) PresentTransaction(ctx, statusCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentTransaction", reflect.TypeOf((*MockTransactionPresenter)(nil).PresentTransaction), ctx, statusCode)
}

// PresentTransactionError mocks base method.
func (m *MockTransactionPresenter) PresentTransactionError(ctx *gin.Context, err error, statusCode int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PresentTransactionError", ctx, err, statusCode)
}

// PresentTransactionError indicates an expected call of PresentTransactionError.
func (mr *MockTransactionPresenterMockRecorder) PresentTransactionError(ctx, err, statusCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentTransactionError", reflect.TypeOf((*MockTransactionPresenter)(nil).PresentTransactionError), ctx, err, statusCode)
}
