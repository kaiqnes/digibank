// Code generated by MockGen. DO NOT EDIT.
// Source: ./accountPresenter.go

// Package mock_presenters is a generated GoMock package.
package mock_presenters

import (
	entities "digibank/internal/domain/entities"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockAccountPresenter is a mock of AccountPresenter interface.
type MockAccountPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockAccountPresenterMockRecorder
}

// MockAccountPresenterMockRecorder is the mock recorder for MockAccountPresenter.
type MockAccountPresenterMockRecorder struct {
	mock *MockAccountPresenter
}

// NewMockAccountPresenter creates a new mock instance.
func NewMockAccountPresenter(ctrl *gomock.Controller) *MockAccountPresenter {
	mock := &MockAccountPresenter{ctrl: ctrl}
	mock.recorder = &MockAccountPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountPresenter) EXPECT() *MockAccountPresenterMockRecorder {
	return m.recorder
}

// PresentAccount mocks base method.
func (m *MockAccountPresenter) PresentAccount(ctx *gin.Context, account entities.Account, statusCode int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PresentAccount", ctx, account, statusCode)
}

// PresentAccount indicates an expected call of PresentAccount.
func (mr *MockAccountPresenterMockRecorder) PresentAccount(ctx, account, statusCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentAccount", reflect.TypeOf((*MockAccountPresenter)(nil).PresentAccount), ctx, account, statusCode)
}

// PresentAccountError mocks base method.
func (m *MockAccountPresenter) PresentAccountError(ctx *gin.Context, err error, statusCode int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PresentAccountError", ctx, err, statusCode)
}

// PresentAccountError indicates an expected call of PresentAccountError.
func (mr *MockAccountPresenterMockRecorder) PresentAccountError(ctx, err, statusCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentAccountError", reflect.TypeOf((*MockAccountPresenter)(nil).PresentAccountError), ctx, err, statusCode)
}
